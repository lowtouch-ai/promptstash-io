(()=>{function e(e,t,o){if("sendPrompt"===e.action)if(t){if(console.log("Setting prompt:",e.prompt),"DIV"===t.tagName&&"true"===t.contentEditable&&t.classList.contains("ProseMirror")){t.innerHTML="";const o=e.prompt.split("\n");t.innerHTML=o.map((e=>`<p>${e}<br></p>`)).join(""),console.log("Cleared and set innerHTML for ChatGPT ProseMirror div with <p> and <br> tags, preserving empty lines.")}else"DIV"===t.tagName&&"true"===t.contentEditable?(t.innerHTML="",t.innerHTML=e.prompt.replace(/\n/g,"<br>"),console.log("Cleared and set innerHTML for contenteditable div with <br> for newlines.")):(t.value="",t.value=e.prompt,console.log("Cleared and set value for input/textarea."));t.dispatchEvent(new Event("input",{bubbles:!0})),t.dispatchEvent(new Event("change",{bubbles:!0})),t.focus(),console.log("Dispatched input and change events."),o({success:!0})}else console.log("No input field found for sendPrompt"),o({success:!1});else if("getPrompt"===e.action)if(t){let e;if("DIV"===t.tagName&&"true"===t.contentEditable&&t.classList.contains("ProseMirror")){const o=Array.from(t.querySelectorAll("p"));o.length>0?(e=o.map((e=>e.textContent.trimEnd())).join("\n"),console.log("Retrieved prompt from ChatGPT ProseMirror div with empty lines preserved:",e)):(e=t.textContent.replace(/\n+/g,"\n").trimEnd(),console.log("Retrieved prompt from ChatGPT ProseMirror div (fallback):",e))}else"DIV"===t.tagName&&"true"===t.contentEditable?(e=t.innerHTML.replace(/<br\s*\/?>/gi,"\n").replace(/<\/?[^>]+(>|$)/g,"").trimEnd(),console.log("Retrieved prompt from contenteditable div:",e)):(e=t.value||"",console.log("Retrieved prompt from input/textarea:",e));o({prompt:e})}else console.log("No input field found for getPrompt"),o({prompt:""});else if("getSelectedText"===e.action){const e=window.getSelection().toString();console.log("Retrieved selected text:",e),o({selectedText:e})}}chrome.runtime.onMessage.addListener(((t,o,n)=>{console.log("Received message:",t);let r=document.querySelectorAll("div#prompt-textarea.ProseMirror[contenteditable='true'], [contenteditable='true'][role='textbox'], textarea:not([disabled]), input[type='text']:not([disabled]), [contenteditable='true'][aria-label*='prompt' i], textarea[aria-label*='prompt' i], input[aria-label*='prompt' i]"),i=Array.from(r).find((e=>null!==e.offsetParent));if(i?console.log("Input field found:",i,"Tag:",i.tagName,"Visible:",null!==i.offsetParent):console.log("No visible input field found with initial querySelector."),!i&&("sendPrompt"===t.action||"getPrompt"===t.action))return console.log("Retrying to find input field after 500ms..."),setTimeout((()=>{r=document.querySelectorAll("div#prompt-textarea.ProseMirror[contenteditable='true'], [contenteditable='true'][role='textbox'], textarea:not([disabled]), input[type='text']:not([disabled]), [contenteditable='true'][aria-label*='prompt' i], textarea[aria-label*='prompt' i], input[aria-label*='prompt' i]"),i=Array.from(r).find((e=>null!==e.offsetParent)),i?console.log("Input field found on retry:",i,"Tag:",i.tagName,"Visible:",null!==i.offsetParent):console.log("No visible input field found after retry."),e(t,i,n)}),500),!0;e(t,i,n)})),document.addEventListener("click",(e=>{const t=document.getElementById("promptstash-popup");t&&!t.contains(e.target)&&chrome.runtime.sendMessage({action:"closePopup"})}));let t=!1;function o(){const e=function(){const e=document.querySelectorAll("div#prompt-textarea.ProseMirror[contenteditable='true'], [contenteditable='true'][role='textbox'], textarea:not([disabled]), input[type='text']:not([disabled]), [contenteditable='true'][aria-label*='prompt' i], textarea[aria-label*='prompt' i], input[aria-label*='prompt' i]");return Array.from(e).find((e=>null!==e.offsetParent))}();e&&!t&&(function(e){const t=document.createElement("div");t.id="promptstash-widget",t.innerHTML=`\n    <div class="widget-container">\n      <button class="extension-button" aria-label="PromptStash" title="PromptStash">\n        <img src="${chrome.runtime.getURL("icon48.png")}" alt="PromptStash" style="width:30px; height:30px; margin:10px;" aria-hidden="true" draggable="false">\n      </button>\n    </div>\n  `,document.body.appendChild(t);const o=e.getBoundingClientRect();t.style.position="absolute",t.style.top=`${o.top+window.scrollY}px`,t.style.left=o.right+window.scrollX-40+"px",t.style.zIndex="10000",t.style.height=`${o.height}px`;const n=t.querySelector(".extension-button");let r,i,l,a=!1;n.addEventListener("mousedown",(e=>{r=e.clientX,i=e.clientY,a=!1,l=setTimeout((()=>{a=!0}),400)})),n.addEventListener("mousemove",(e=>{(Math.abs(e.clientX-r)>1||Math.abs(e.clientY-i)>1)&&(a=!0)})),n.addEventListener("click",(e=>{clearTimeout(l),a||(document.getElementById("promptstash-popup")?chrome.runtime.sendMessage({action:"closePopup"}):chrome.runtime.sendMessage({action:"togglePopup"})),a=!1})),n.addEventListener("mouseleave",(()=>{clearTimeout(l)}))}(e),t=!0)}o(),new MutationObserver((()=>{o()})).observe(document.body,{childList:!0,subtree:!0})})();