(()=>{function e(e,t,n){if("sendPrompt"===e.action)if(t){if(console.log("Setting prompt:",e.prompt),"DIV"===t.tagName&&"true"===t.contentEditable&&t.classList.contains("ProseMirror")){t.innerHTML="";const n=e.prompt.split("\n");t.innerHTML=n.map((e=>`<p>${e}<br></p>`)).join(""),console.log("Cleared and set innerHTML for ChatGPT ProseMirror div with <p> and <br> tags, preserving empty lines.")}else"DIV"===t.tagName&&"true"===t.contentEditable?(t.innerHTML="",t.innerHTML=e.prompt.replace(/\n/g,"<br>"),console.log("Cleared and set innerHTML for contenteditable div with <br> for newlines.")):(t.value="",t.value=e.prompt,console.log("Cleared and set value for input/textarea."));t.dispatchEvent(new Event("input",{bubbles:!0})),t.dispatchEvent(new Event("change",{bubbles:!0})),t.focus(),console.log("Dispatched input and change events."),n({success:!0})}else console.log("No input field found for sendPrompt"),n({success:!1});else if("getPrompt"===e.action)if(t){let e;if("DIV"===t.tagName&&"true"===t.contentEditable&&t.classList.contains("ProseMirror")){const n=Array.from(t.querySelectorAll("p"));n.length>0?(e=n.map((e=>e.textContent.trimEnd())).join("\n"),console.log("Retrieved prompt from ChatGPT ProseMirror div with empty lines preserved:",e)):(e=t.textContent.replace(/\n+/g,"\n").trimEnd(),console.log("Retrieved prompt from ChatGPT ProseMirror div (fallback):",e))}else"DIV"===t.tagName&&"true"===t.contentEditable?(e=t.innerHTML.replace(/<br\s*\/?>/gi,"\n").replace(/<\/?[^>]+(>|$)/g,"").trimEnd(),console.log("Retrieved prompt from contenteditable div:",e)):(e=t.value||"",console.log("Retrieved prompt from input/textarea:",e));n({prompt:e})}else console.log("No input field found for getPrompt"),n({prompt:""});else if("getSelectedText"===e.action){const e=window.getSelection().toString();console.log("Retrieved selected text:",e),n({selectedText:e})}}chrome.runtime.onMessage.addListener(((t,n,o)=>{console.log("Received message:",t);let r=document.querySelectorAll("div#prompt-textarea.ProseMirror[contenteditable='true'], [contenteditable='true'][role='textbox'], textarea:not([disabled]), input[type='text']:not([disabled]), [contenteditable='true'][aria-label*='prompt' i], textarea[aria-label*='prompt' i], input[aria-label*='prompt' i]"),i=Array.from(r).find((e=>null!==e.offsetParent));if(i?console.log("Input field found:",i,"Tag:",i.tagName,"Visible:",null!==i.offsetParent):console.log("No visible input field found with initial querySelector."),!i&&("sendPrompt"===t.action||"getPrompt"===t.action))return console.log("Retrying to find input field after 500ms..."),setTimeout((()=>{r=document.querySelectorAll("div#prompt-textarea.ProseMirror[contenteditable='true'], [contenteditable='true'][role='textbox'], textarea:not([disabled]), input[type='text']:not([disabled]), [contenteditable='true'][aria-label*='prompt' i], textarea[aria-label*='prompt' i], input[aria-label*='prompt' i]"),i=Array.from(r).find((e=>null!==e.offsetParent)),i?console.log("Input field found on retry:",i,"Tag:",i.tagName,"Visible:",null!==i.offsetParent):console.log("No visible input field found after retry."),e(t,i,o)}),500),!0;e(t,i,o)})),document.addEventListener("click",(e=>{const t=document.getElementById("promptstash-popup");t&&!t.contains(e.target)&&chrome.runtime.sendMessage({action:"closePopup"})}));let t=!1;function n(){const e=function(){const e=document.querySelectorAll("div#prompt-textarea.ProseMirror[contenteditable='true'], [contenteditable='true'][role='textbox'], textarea:not([disabled]), input[type='text']:not([disabled]), [contenteditable='true'][aria-label*='prompt' i], textarea[aria-label*='prompt' i], input[aria-label*='prompt' i]");return Array.from(e).find((e=>null!==e.offsetParent))}();e&&!t&&(function(e){const t=document.createElement("div");t.id="promptstash-widget",t.innerHTML=`\n    <div class="widget-container">\n      <button class="extension-button" aria-label="Open PromptStash" title="Open PromptStash">\n        <img src="${chrome.runtime.getURL("icon48.png")}" alt="PromptStash Icon" aria-hidden="true">\n      </button>\n    </div>\n  `,document.body.appendChild(t);const n=e.getBoundingClientRect();t.style.position="absolute",t.style.top=`${n.bottom+window.scrollY+10}px`,t.style.left=`${n.left+window.scrollX}px`,t.style.zIndex="10000",function(e){let t,n,o=!1;e.addEventListener("mousedown",(r=>{o=!0,t=r.clientX-e.getBoundingClientRect().left,n=r.clientY-e.getBoundingClientRect().top,e.style.cursor="grabbing"})),document.addEventListener("mousemove",(r=>{o&&(e.style.left=r.clientX-t+"px",e.style.top=r.clientY-n+"px")})),document.addEventListener("mouseup",(()=>{o=!1,e.style.cursor="grab"}))}(t),t.querySelector(".extension-button").addEventListener("click",(()=>{chrome.runtime.sendMessage({action:"togglePopup"})}))}(e),t=!0)}n(),new MutationObserver((()=>{n()})).observe(document.body,{childList:!0,subtree:!0})})();